package systm_web.account;

import DotNetOpenAuth.AspNet.*;
import systm_web.*;

//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por herramienta.
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar. 
// </auto-generated>
//------------------------------------------------------------------------------


public class RegisterExternalLogin extends System.Web.UI.Page
{
	protected final String getProviderName()
	{
		return (String)ViewState["ProviderName"] != null ? ViewState["ProviderName"] : "";
	}
	private void setProviderName(String value)
	{
		ViewState["ProviderName"] = value;
	}

	protected final String getProviderDisplayName()
	{
		return (String)ViewState["ProviderDisplayName"] != null ? ViewState["ProviderDisplayName"] : "";
	}
	private void setProviderDisplayName(String value)
	{
		ViewState["ProviderDisplayName"] = value;
	}

	protected final String getProviderUserId()
	{
		return (String)ViewState["ProviderUserId"] != null ? ViewState["ProviderUserId"] : "";
	}
	private void setProviderUserId(String value)
	{
		ViewState["ProviderUserId"] = value;
	}

	protected final String getProviderUserName()
	{
		return (String)ViewState["ProviderUserName"] != null ? ViewState["ProviderUserName"] : "";
	}
	private void setProviderUserName(String value)
	{
		ViewState["ProviderUserName"] = value;
	}

	protected final void Page_Load()
	{
		if (!IsPostBack)
		{
			ProcessProviderResult();
		}
	}

	protected final void logIn_Click(Object sender, tangible.EventArgs e)
	{
		CreateAndLoginUser();
	}

	protected final void cancel_Click(Object sender, tangible.EventArgs e)
	{
		RedirectToReturnUrl();
	}

	private void ProcessProviderResult()
	{
		// Procesar el resultado de un proveedor de autenticación en la solicitud
		setProviderName(OpenAuth.GetProviderNameFromCurrentRequest());

		if (tangible.StringHelper.isNullOrEmpty(getProviderName()))
		{
			Response.Redirect(FormsAuthentication.LoginUrl);
		}

		// Crear la dirección URL de redirección para la comprobación de OpenAuth
		var redirectUrl = "~/Account/RegisterExternalLogin.aspx";
		var returnUrl = Request.QueryString["ReturnUrl"];
		if (!tangible.StringHelper.isNullOrEmpty(returnUrl))
		{
			redirectUrl += "?ReturnUrl=" + HttpUtility.UrlEncode(returnUrl);
		}

		// Comprobar la carga de OpenAuth
		var authResult = OpenAuth.VerifyAuthentication(redirectUrl);
		setProviderDisplayName(OpenAuth.GetProviderDisplayName(getProviderName()));
		if (!authResult.IsSuccessful)
		{
			Title = "Error de inicio de sesión externo";
			userNameForm.Visible = false;

			ModelState.AddModelError("Provider", String.format("Error de inicio de sesión externo %1$s.", getProviderDisplayName()));

			// Para ver este error, habilite el seguimiento de página en web.config (<system.web><trace enabled="true"/></system.web>) y visite ~/Trace.axd
			Trace.Warn("OpenAuth", String.format("Error al comprobar la autenticación con %1$s)", getProviderDisplayName()), authResult.Error);
			return;
		}

		// El usuario ha iniciado sesión con el proveedor correctamente
		// Comprobar si el usuario ya está registrado localmente
//C# TO JAVA CONVERTER TODO TASK: C# to Java Converter could not resolve the named parameters in the following line:
//ORIGINAL LINE: if (OpenAuth.Login(authResult.Provider, authResult.ProviderUserId, createPersistentCookie: false))
		if (OpenAuth.Login(authResult.Provider, authResult.ProviderUserId, createPersistentCookie: false))
		{
			RedirectToReturnUrl();
		}

		// Almacenar los detalles del proveedor en ViewState
		setProviderName(authResult.Provider);
		setProviderUserId(authResult.ProviderUserId);
		setProviderUserName(authResult.UserName);

		// Seccionar la cadena de consulta desde la acción
		Form.Action = ResolveUrl(redirectUrl);

		if (User.Identity.IsAuthenticated)
		{
			// El usuario ya se ha autenticado, agregue el inicio de sesión externo y redirija para volver a la dirección URL
			OpenAuth.AddAccountToExistingUser(getProviderName(), getProviderUserId(), getProviderUserName(), User.Identity.Name);
			RedirectToReturnUrl();
		}
		else
		{
			// El usuario es nuevo, solicitar nombres de pertenencia deseados
			userName.Text = authResult.UserName;
		}
	}

	private void CreateAndLoginUser()
	{
		if (!IsValid)
		{
			return;
		}

		var createResult = OpenAuth.CreateUser(getProviderName(), getProviderUserId(), getProviderUserName(), userName.Text);
		if (!createResult.IsSuccessful)
		{

			ModelState.AddModelError("UserName", createResult.ErrorMessage);

		}
		else
		{
			// Creación y asociación de usuario correctas
//C# TO JAVA CONVERTER TODO TASK: C# to Java Converter could not resolve the named parameters in the following line:
//ORIGINAL LINE: if (OpenAuth.Login(ProviderName, ProviderUserId, createPersistentCookie: false))
			if (OpenAuth.Login(getProviderName(), getProviderUserId(), createPersistentCookie: false))
			{
				RedirectToReturnUrl();
			}
		}
	}

	private void RedirectToReturnUrl()
	{
		var returnUrl = Request.QueryString["ReturnUrl"];
		if (!tangible.StringHelper.isNullOrEmpty(returnUrl) && OpenAuth.IsLocalUrl(returnUrl))
		{
			Response.Redirect(returnUrl);
		}
		else
		{
			Response.Redirect("~/");
		}
	}





	/** 
	 Control userNameForm.
	 
	 
	 Campo generado automáticamente.
	 Para modificarlo, mueva la declaración del campo del archivo del diseñador al archivo de código subyacente.
	 
	*/
	protected System.Web.UI.WebControls.PlaceHolder userNameForm;

	/** 
	 Control userName.
	 
	 
	 Campo generado automáticamente.
	 Para modificarlo, mueva la declaración del campo del archivo del diseñador al archivo de código subyacente.
	 
	*/
	protected System.Web.UI.WebControls.TextBox userName;


}